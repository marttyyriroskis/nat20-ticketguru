package com.nat20.ticketguru;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.security.test.context.support.WithMockUser;

@SpringBootTest(properties = "spring.profiles.active=test")
@AutoConfigureMockMvc
public class TicketRestTest {
    @Autowired
    private WebApplicationContext webApplicationContext;

    private MockMvc mockMvc;

    @BeforeEach
    public void setup() {
        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
    }

    // Check that /api/tickets loads
    @Test
    @WithMockUser(username = "admin@test.com", roles = "ADMIN")
    public void statusOk() throws Exception {
        mockMvc.perform(get("/api/tickets"))
            .with(csrf())
            .andExpect(status().isOk());
    }

    // Check that the media type is JSON
    @Test
    @WithMockUser(username = "admin@test.com", roles = "ADMIN")
    public void responseTypeApplicationJson() throws Exception {
        mockMvc.perform(get("/api/tickets"))
            .with(csrf())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON))
            .andExpect(status().isOk());
    }

    // Check that the Ticket instance has an id and a barcode
    @Test
    @WithMockUser(username = "admin@test.com", roles = "ADMIN")
    public void validateJsonStructure() throws Exception {
        mockMvc.perform(get("/api/tickets"))
            .with(csrf())
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON))
            .andExpect(jsonPath("$").isArray())
            .andExpect(jsonPath("$[0].id").exists())
            .andExpect(jsonPath("$[0].barcode").isNotEmpty());
    }

}
